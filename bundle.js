/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY_TYPE: () => (/* binding */ ARRAY_TYPE),\n/* harmony export */   EPSILON: () => (/* binding */ EPSILON),\n/* harmony export */   RANDOM: () => (/* binding */ RANDOM),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   setMatrixArrayType: () => (/* binding */ setMatrixArrayType),\n/* harmony export */   toRadian: () => (/* binding */ toRadian)\n/* harmony export */ });\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n    i = arguments.length;\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n  return Math.sqrt(y);\n};\n\n//# sourceURL=webpack://fluid2d-simulation/./node_modules/gl-matrix/esm/common.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   dist: () => (/* binding */ dist),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   div: () => (/* binding */ div),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   len: () => (/* binding */ len),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   sqrDist: () => (/* binding */ sqrDist),\n/* harmony export */   sqrLen: () => (/* binding */ sqrLen),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat2: () => (/* binding */ transformMat2),\n/* harmony export */   transformMat2d: () => (/* binding */ transformMat2d),\n/* harmony export */   transformMat3: () => (/* binding */ transformMat3),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   zero: () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nfunction fromValues(x, y) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction squaredLength(a) {\n  var x = a[0],\n    y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nfunction normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x * x + y * y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nfunction rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n    p1 = a[1] - b[1],\n    sinC = Math.sin(rad),\n    cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nfunction angle(a, b) {\n  var x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1],\n    // mag is the product of the magnitudes of a and b\n    mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n    // mag &&.. short circuits if mag == 0\n    cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nfunction str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n    a1 = a[1];\n  var b0 = b[0],\n    b1 = b[1];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nvar len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nvar sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nvar mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nvar div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nvar dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nvar sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nvar sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n    if (!stride) {\n      stride = 2;\n    }\n    if (!offset) {\n      offset = 0;\n    }\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://fluid2d-simulation/./node_modules/gl-matrix/esm/vec2.js?");

/***/ }),

/***/ "./style/style.css":
/*!*************************!*\
  !*** ./style/style.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://fluid2d-simulation/./style/style.css?");

/***/ }),

/***/ "./src/consts.ts":
/*!***********************!*\
  !*** ./src/consts.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GRAVITY: () => (/* binding */ GRAVITY),\n/* harmony export */   HEIGHT: () => (/* binding */ HEIGHT),\n/* harmony export */   HOUSE_COLOR: () => (/* binding */ HOUSE_COLOR),\n/* harmony export */   KERNEL_DISTANCE: () => (/* binding */ KERNEL_DISTANCE),\n/* harmony export */   PADDING: () => (/* binding */ PADDING),\n/* harmony export */   TIMESTEP: () => (/* binding */ TIMESTEP),\n/* harmony export */   WALL_COLOR: () => (/* binding */ WALL_COLOR),\n/* harmony export */   WATER_COLOR: () => (/* binding */ WATER_COLOR),\n/* harmony export */   WATER_DENSITY: () => (/* binding */ WATER_DENSITY),\n/* harmony export */   WATER_K_FACTOR: () => (/* binding */ WATER_K_FACTOR),\n/* harmony export */   WATER_VISCOSITY: () => (/* binding */ WATER_VISCOSITY),\n/* harmony export */   WIDTH: () => (/* binding */ WIDTH),\n/* harmony export */   poly6Grad: () => (/* binding */ poly6Grad),\n/* harmony export */   poly6Kernel: () => (/* binding */ poly6Kernel),\n/* harmony export */   poly6Lap: () => (/* binding */ poly6Lap)\n/* harmony export */ });\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec2.js\");\n\nvar WIDTH = 600;\nvar HEIGHT = 400;\nvar PADDING = 10;\nvar WATER_DENSITY = 998;\nvar WATER_K_FACTOR = 100000;\nvar WATER_COLOR = \"#0000ff\";\nvar WATER_VISCOSITY = 100;\nvar WALL_COLOR = \"#ff0000\";\nvar HOUSE_COLOR = \"#00ff00\";\nvar KERNEL_DISTANCE = 10;\nvar TIMESTEP = 1 / 60;\nvar GRAVITY = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.fromValues(0, -100);\nvar KERNEL_FACTOR = 315 / 64 / Math.PI / Math.pow(KERNEL_DISTANCE, 9);\nfunction poly6Kernel(r) {\n    var d = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.len(r);\n    return KERNEL_FACTOR * Math.pow((Math.pow(KERNEL_DISTANCE, 2) - Math.pow(d, 2)), 3);\n}\nvar GRAD_FACTOR = -45 / Math.PI / Math.pow(KERNEL_DISTANCE, 6);\nfunction poly6Grad(r) {\n    var d = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.len(r);\n    var ret = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.clone(r);\n    if (d === 0) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.zero(ret);\n        return ret;\n    }\n    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.scale(ret, ret, (GRAD_FACTOR * Math.pow((KERNEL_DISTANCE - d), 2)) / d);\n    return ret;\n}\nvar LAP_FACTOR = 45 / Math.PI / Math.pow(KERNEL_DISTANCE, 6);\nfunction poly6Lap(r) {\n    var d = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.len(r);\n    return LAP_FACTOR * (KERNEL_DISTANCE - d);\n}\n\n\n//# sourceURL=webpack://fluid2d-simulation/./src/consts.ts?");

/***/ }),

/***/ "./src/hashing.ts":
/*!************************!*\
  !*** ./src/hashing.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashNearNeighbors: () => (/* binding */ hashNearNeighbors),\n/* harmony export */   naiveNearNeighbors: () => (/* binding */ naiveNearNeighbors),\n/* harmony export */   updateHashTable: () => (/* binding */ updateHashTable)\n/* harmony export */ });\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec2.js\");\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consts */ \"./src/consts.ts\");\n\n\nvar hashTable;\nvar max_hi = Math.floor((_consts__WEBPACK_IMPORTED_MODULE_0__.HEIGHT + 2 * _consts__WEBPACK_IMPORTED_MODULE_0__.PADDING) / _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE);\nvar max_wi = Math.floor((_consts__WEBPACK_IMPORTED_MODULE_0__.WIDTH + 2 * _consts__WEBPACK_IMPORTED_MODULE_0__.PADDING) / _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE);\nfunction updateHashTable(particles) {\n    hashTable = new Array(max_hi * max_wi);\n    for (var i = 0; i < hashTable.length; i++) {\n        hashTable[i] = new Array();\n    }\n    particles.forEach(function (p) {\n        var hi = Math.floor((p.pos[1] + _consts__WEBPACK_IMPORTED_MODULE_0__.PADDING) / _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE);\n        var wi = Math.floor((p.pos[0] + _consts__WEBPACK_IMPORTED_MODULE_0__.PADDING) / _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE);\n        var cell = hashTable[hi * max_hi + wi];\n        cell.push(p);\n    });\n}\nvar dh = [-1, -1, -1, 0, 0, 0, 1, 1, 1];\nvar dw = [-1, 0, 1, -1, 0, 1, -1, 0, 1];\nfunction hashNearNeighbors(loc) {\n    var ret = [];\n    var hi = Math.floor((loc[1] + _consts__WEBPACK_IMPORTED_MODULE_0__.PADDING) / _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE);\n    var wi = Math.floor((loc[0] + _consts__WEBPACK_IMPORTED_MODULE_0__.PADDING) / _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE);\n    for (var i = 0; i < 9; i++) {\n        var hi_ = hi + dh[i];\n        var wi_ = wi + dw[i];\n        if (hi_ < 0 || hi_ >= max_hi)\n            continue;\n        if (wi_ < 0 || wi_ >= max_wi)\n            continue;\n        hashTable[hi_ * max_hi + wi_].forEach(function (p) {\n            if (gl_matrix__WEBPACK_IMPORTED_MODULE_1__.dist(loc, p.pos) < _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE)\n                ret.push(p);\n        });\n    }\n    return ret;\n}\nfunction naiveNearNeighbors(loc, particles) {\n    var ret = [];\n    particles.forEach(function (p) {\n        if (gl_matrix__WEBPACK_IMPORTED_MODULE_1__.dist(loc, p.pos) < _consts__WEBPACK_IMPORTED_MODULE_0__.KERNEL_DISTANCE)\n            ret.push(p);\n    });\n    return ret;\n}\n\n\n//# sourceURL=webpack://fluid2d-simulation/./src/hashing.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec2.js\");\n/* harmony import */ var _style_style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../style/style.css */ \"./style/style.css\");\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./consts */ \"./src/consts.ts\");\n/* harmony import */ var _particle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./particle */ \"./src/particle.ts\");\n/* harmony import */ var _hashing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hashing */ \"./src/hashing.ts\");\n\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar _a, _b, _c, _d, _e;\n\n\n\n\n\nvar fluidParticles = [];\nvar boundaryParticles = [];\nvar wallParticles = [];\nvar houseParticles = [];\nfunction sizeCanvas() {\n    var canvas = document.querySelector(\"#canvas\");\n    canvas.width = _consts__WEBPACK_IMPORTED_MODULE_1__.WIDTH;\n    canvas.height = _consts__WEBPACK_IMPORTED_MODULE_1__.HEIGHT;\n}\nfunction drawParticle(ctx, p, size, color) {\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(p.pos[0], _consts__WEBPACK_IMPORTED_MODULE_1__.HEIGHT - p.pos[1], size, 0, 2 * Math.PI);\n    ctx.fill();\n}\nfunction render() {\n    var canvas = document.querySelector(\"#canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, _consts__WEBPACK_IMPORTED_MODULE_1__.WIDTH, _consts__WEBPACK_IMPORTED_MODULE_1__.HEIGHT);\n    fluidParticles.forEach(function (p) {\n        drawParticle(ctx, p, 2, _consts__WEBPACK_IMPORTED_MODULE_1__.WATER_COLOR);\n    });\n    wallParticles.forEach(function (p) {\n        drawParticle(ctx, p, 1, _consts__WEBPACK_IMPORTED_MODULE_1__.WALL_COLOR);\n    });\n    houseParticles.forEach(function (p) {\n        drawParticle(ctx, p, 1, _consts__WEBPACK_IMPORTED_MODULE_1__.HOUSE_COLOR);\n    });\n}\nfunction initfluidParticles(size) {\n    var left = 0;\n    var right = 100;\n    var bottom = 0;\n    var top = 300;\n    for (var x = left + size / 2; x < right; x += size) {\n        for (var y = bottom + size / 2; y < top; y += size) {\n            var noiseX = (Math.random() * size) / 10;\n            var noiseY = (Math.random() * size) / 10;\n            fluidParticles.push(new _particle__WEBPACK_IMPORTED_MODULE_2__.Particle(x + noiseX, y + noiseY, 1));\n        }\n    }\n    (0,_hashing__WEBPACK_IMPORTED_MODULE_3__.updateHashTable)(fluidParticles);\n    computeDensity(fluidParticles);\n    var max_density = 0;\n    fluidParticles.forEach(function (p) {\n        max_density = Math.max(max_density, p.density);\n    });\n    var WATER_PARTICLE_MASS = _consts__WEBPACK_IMPORTED_MODULE_1__.WATER_DENSITY / max_density;\n    fluidParticles.forEach(function (p) {\n        p.mass = WATER_PARTICLE_MASS;\n    });\n}\nfunction initBoundaries(size) {\n    for (var x = -_consts__WEBPACK_IMPORTED_MODULE_1__.PADDING + size / 2; x < _consts__WEBPACK_IMPORTED_MODULE_1__.WIDTH + _consts__WEBPACK_IMPORTED_MODULE_1__.PADDING; x += size) {\n        for (var y = -_consts__WEBPACK_IMPORTED_MODULE_1__.PADDING + size / 2; y < _consts__WEBPACK_IMPORTED_MODULE_1__.HEIGHT + _consts__WEBPACK_IMPORTED_MODULE_1__.PADDING; y += size) {\n            if (x > 0 && x < _consts__WEBPACK_IMPORTED_MODULE_1__.WIDTH && y > 0 && y < _consts__WEBPACK_IMPORTED_MODULE_1__.HEIGHT)\n                continue;\n            boundaryParticles.push(new _particle__WEBPACK_IMPORTED_MODULE_2__.Particle(x, y, 1));\n        }\n    }\n    (0,_hashing__WEBPACK_IMPORTED_MODULE_3__.updateHashTable)(boundaryParticles);\n    computeDensity(boundaryParticles);\n    boundaryParticles.forEach(function (p) {\n        var volume = 1 / p.density;\n        p.mass = _consts__WEBPACK_IMPORTED_MODULE_1__.WATER_DENSITY * volume;\n    });\n}\nfunction initWall(size) {\n    var left = WALL_DISTANCE;\n    var right = left + 50;\n    var bottom = 0;\n    var top = WALL_HEIGHT;\n    for (var x = left + size / 2; x < right; x += size) {\n        for (var y = bottom + size / 2; y < top; y += size) {\n            wallParticles.push(new _particle__WEBPACK_IMPORTED_MODULE_2__.Particle(x, y, 1));\n        }\n    }\n    (0,_hashing__WEBPACK_IMPORTED_MODULE_3__.updateHashTable)(wallParticles);\n    computeDensity(wallParticles);\n    wallParticles.forEach(function (p) {\n        var volume = 1 / p.density;\n        p.mass = 1 * _consts__WEBPACK_IMPORTED_MODULE_1__.WATER_DENSITY * volume;\n    });\n}\nfunction initHouse(size) {\n    var left = 550;\n    var right = 600;\n    var bottom = 0;\n    var top = 50;\n    for (var x = left + size / 2; x < right; x += size) {\n        for (var y = bottom + size / 2; y < top; y += size) {\n            houseParticles.push(new _particle__WEBPACK_IMPORTED_MODULE_2__.Particle(x, y, 1));\n        }\n    }\n    (0,_hashing__WEBPACK_IMPORTED_MODULE_3__.updateHashTable)(houseParticles);\n    computeDensity(houseParticles);\n    houseParticles.forEach(function (p) {\n        var volume = 1 / p.density;\n        p.mass = 1 * _consts__WEBPACK_IMPORTED_MODULE_1__.WATER_DENSITY * volume;\n    });\n}\nfunction initAll() {\n    fluidParticles = [];\n    boundaryParticles = [];\n    wallParticles = [];\n    houseParticles = [];\n    initBoundaries(1);\n    initfluidParticles(INITIAL_PARTICLE_DISTANCE);\n    initWall(1);\n    initHouse(1);\n}\nfunction computeDensity(particles) {\n    var r = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\n    particles.forEach(function (p) {\n        p.density = 0;\n        (0,_hashing__WEBPACK_IMPORTED_MODULE_3__.hashNearNeighbors)(p.pos).forEach(function (p_) {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.sub(r, p.pos, p_.pos);\n            p.density += p_.mass * (0,_consts__WEBPACK_IMPORTED_MODULE_1__.poly6Kernel)(r);\n        });\n    });\n}\nfunction computePressure(particles) {\n    particles.forEach(function (p) {\n        p.pressure = _consts__WEBPACK_IMPORTED_MODULE_1__.WATER_K_FACTOR * (p.density - _consts__WEBPACK_IMPORTED_MODULE_1__.WATER_DENSITY);\n    });\n}\nfunction computeAcceleration(particles) {\n    var r = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\n    var acc_pressure = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\n    var acc_viscosity = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\n    var acc_p_ = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\n    var acc_v_ = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\n    particles.forEach(function (p) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.copy(p.acc, _consts__WEBPACK_IMPORTED_MODULE_1__.GRAVITY);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.zero(acc_pressure);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.zero(acc_viscosity);\n        (0,_hashing__WEBPACK_IMPORTED_MODULE_3__.hashNearNeighbors)(p.pos).forEach(function (p_) {\n            var isBoundary = p_.pressure === undefined;\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.sub(r, p.pos, p_.pos);\n            acc_p_ = (0,_consts__WEBPACK_IMPORTED_MODULE_1__.poly6Grad)(r);\n            if (isBoundary)\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.scale(acc_p_, acc_p_, (p_.mass / p.density) * Math.max(p.pressure, 0));\n            else\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.scale(acc_p_, acc_p_, ((p_.mass / p_.density) * (p.pressure + p_.pressure)) / 2);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.add(acc_pressure, acc_pressure, acc_p_);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.sub(acc_v_, p.vel, p_.vel);\n            if (isBoundary)\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.scale(acc_v_, acc_v_, (p_.mass / p.density) * (0,_consts__WEBPACK_IMPORTED_MODULE_1__.poly6Lap)(r));\n            else\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.scale(acc_v_, acc_v_, (p_.mass / p_.density) * (0,_consts__WEBPACK_IMPORTED_MODULE_1__.poly6Lap)(r));\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.add(acc_viscosity, acc_viscosity, acc_v_);\n        });\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.scaleAndAdd(p.acc, p.acc, acc_pressure, -1 / p.density);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.scaleAndAdd(p.acc, p.acc, acc_viscosity, -_consts__WEBPACK_IMPORTED_MODULE_1__.WATER_VISCOSITY);\n    });\n}\nfunction updateParcitles(particles, dt) {\n    particles.forEach(function (p) {\n        p.update(dt);\n    });\n}\nfunction handleBoundaries() {\n    fluidParticles.forEach(function (p) {\n        if (p.pos[0] < 0) {\n            p.pos[0] = 0;\n        }\n        if (p.pos[0] > _consts__WEBPACK_IMPORTED_MODULE_1__.WIDTH) {\n            p.pos[0] = _consts__WEBPACK_IMPORTED_MODULE_1__.WIDTH;\n        }\n        if (p.pos[1] < 0) {\n            p.pos[1] = 0;\n        }\n        if (p.pos[1] > _consts__WEBPACK_IMPORTED_MODULE_1__.HEIGHT) {\n            p.pos[1] = _consts__WEBPACK_IMPORTED_MODULE_1__.HEIGHT;\n        }\n    });\n}\nvar WALL_DISTANCE = 200;\nvar WALL_HEIGHT = 100;\nvar INITIAL_PARTICLE_DISTANCE = 10;\nvar TIMESTEP = 0.013;\n(_a = document.querySelector(\"#resetButton\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", initAll);\n(_b = document.querySelector(\"#wallDistanceSlider\")) === null || _b === void 0 ? void 0 : _b.addEventListener(\"input\", function (e) {\n    var value = e.target.value;\n    document.querySelector(\"#wallDistanceValue\").innerHTML = value;\n    WALL_DISTANCE = parseInt(value);\n});\n(_c = document.querySelector(\"#wallHeightSlider\")) === null || _c === void 0 ? void 0 : _c.addEventListener(\"input\", function (e) {\n    var value = e.target.value;\n    document.querySelector(\"#wallHeightValue\").innerHTML = value;\n    WALL_HEIGHT = parseInt(value);\n});\n(_d = document.querySelector(\"#resolutionSlider\")) === null || _d === void 0 ? void 0 : _d.addEventListener(\"input\", function (e) {\n    var value = e.target.value;\n    document.querySelector(\"#resolutionValue\").innerHTML = value;\n    INITIAL_PARTICLE_DISTANCE = 10 - parseInt(value);\n});\n(_e = document.querySelector(\"#timeStepSlider\")) === null || _e === void 0 ? void 0 : _e.addEventListener(\"input\", function (e) {\n    var value = e.target.value;\n    document.querySelector(\"#timeStepValue\").innerHTML = value;\n    TIMESTEP = parseFloat(value);\n});\nfunction simulate() {\n    (0,_hashing__WEBPACK_IMPORTED_MODULE_3__.updateHashTable)(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], fluidParticles, true), boundaryParticles, true), wallParticles, true), houseParticles, true));\n    computeDensity(fluidParticles);\n    computePressure(fluidParticles);\n    computeAcceleration(fluidParticles);\n    updateParcitles(fluidParticles, TIMESTEP);\n    handleBoundaries();\n}\nfunction animate() {\n    simulate();\n    render();\n    window.requestAnimationFrame(animate);\n}\nwindow.onload = function () {\n    sizeCanvas();\n    initAll();\n    animate();\n};\n\n\n//# sourceURL=webpack://fluid2d-simulation/./src/main.ts?");

/***/ }),

/***/ "./src/particle.ts":
/*!*************************!*\
  !*** ./src/particle.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Particle: () => (/* binding */ Particle)\n/* harmony export */ });\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec2.js\");\n\nvar Particle = (function () {\n    function Particle(x, y, mass) {\n        this.pos = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.fromValues(x, y);\n        this.vel = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.create();\n        this.acc = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.create();\n        this.mass = mass;\n    }\n    Particle.prototype.update = function (dt) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.scaleAndAdd(this.vel, this.vel, this.acc, dt);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.scaleAndAdd(this.pos, this.pos, this.vel, dt);\n    };\n    return Particle;\n}());\n\n\n\n//# sourceURL=webpack://fluid2d-simulation/./src/particle.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;